Find the maximum sum subarray in the given 2D array.

Input Format
First line of every test case consists of 2 integers R and C , denoting number of rows and columns.
Second line consists of R*C spaced integers denoting number of elements in array.

Constraints
1 <= R, C <= 100

Output Format
Print the maximum possible sum of any rectangle which can be formed in that 2D matrix.

Sample Input
4 5
1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6
Sample Output
29
Explanation
1 2 -1 -4 -20
-8 -3 4 2 1
3 8 10 1 3
-4 -1 1 7 -6
The maximum sum rectangle which can be formed in this subarray has coordinates leftTop(2,2) and rightBottom(4,4) according to 1-based indexing.

//Program

#include<bits/stdc++.h>
using namespace std;

int kadane(int* arr, int* start, int* finish, int n)
{
    // initialize sum, maxSum and
    int sum = 0, maxSum = INT_MIN, i;

    // Just some initial value to check
    // for all negative values case
    *finish = -1;

    // local variable
    int local_start = 0;

    for (i = 0; i < n; ++i)
    {
        sum += arr[i];
        if (sum < 0)
        {
            sum = 0;
            local_start = i + 1;
        }
        else if (sum > maxSum)
        {
            maxSum = sum;
            *start = local_start;
            *finish = i;
        }
    }

    // There is at-least one
    // non-negative number
    if (*finish != -1)
        return maxSum;

    // Special Case: When all numbers
    // in arr[] are negative
    maxSum = arr[0];
    *start = *finish = 0;

    // Find the maximum element in array
    for (i = 1; i < n; i++)
    {
        if (arr[i] > maxSum)
        {
            maxSum = arr[i];
            *start = *finish = i;
        }
    }
    return maxSum;
}

int main()
{
    int r,c,i,j;
    int maxSum = INT_MIN, finalLeft, finalRight, finalTop,finalBottom;
    int left,right;
    cin>>r>>c;
    int temp[r],sum,start,finish;
    int m[r][c];

    for(i=0;i<r;i++)
        for(j=0;j<c;j++)
            cin>>m[i][j];

    for (left = 0; left < c; ++left)
    {
        // Initialize all elements of temp as 0
        memset(temp, 0, sizeof(temp));
         for (right = left; right < c; ++right)
         {
              for (i = 0; i < r; ++i)
                    temp[i] += m[i][right];

              sum = kadane(temp, &start, &finish, r);
               if (sum > maxSum)
                {
                    maxSum = sum;
                    finalLeft = left;
                    finalRight = right;
                    finalTop = start;
                    finalBottom = finish;
                }
        }
    }
    cout<<maxSum;
    return 0;
}
